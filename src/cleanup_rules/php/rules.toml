# Aangepaste regels voor PHP.
# Deze regels gebruiken de Tree-sitter–PHP grammatica en behandelen onder andere:
#   - Boolean expressie–samenvoeging en vereenvoudiging (bijv. overbodige haakjes, logische operatoren)
#   - Vereenvoudigen van if–statements (bv. if (true) { … } -> { … })
#   - Refactoring van feature flags: vervang Feature::enabled(...) door "true" en Feature::disabled(...) door "false".
#
# Let op: Deze regels vormen een vereenvoudigde set en kunnen verder uitgebreid worden naarmate de noden groeien.

#########################
# Boolean literal cleanup
#########################
[[rules]]
name = "simplify_parenthesized_expression"
query = """
(
  (parenthesized_expression ((true) | (false)) @literal) @pe
)
"""
replace = "@literal"
replace_node = "pe"
groups = ["boolean_expression_simplify"]
is_seed_rule = false

#########################
# If statement vereenvoudigingen
#########################
[[rules]]
groups = ["if_cleanup", "boolean_expression_simplify"]
name = "simplify_if_true"
query = """
(
  (if_statement
     condition: (parenthesized_expression ((true) | (false)) @condition)
     statement: (compound_statement) @consequence
  ) @if_statement
  (#eq? @condition "true")
)
"""
replace = "@consequence"
replace_node = "if_statement"
is_seed_rule = false

[[rules]]
groups = ["if_cleanup", "boolean_expression_simplify"]
name = "simplify_if_false_with_alternative"
query = """
(
  (if_statement
     condition: (parenthesized_expression ((true) | (false)) @condition)
     statement: (compound_statement) @consquent
     else_clause: (else_clause (compound_statement) @alternative)
  ) @if_statement
  (#eq? @condition "false")
)
"""
replace = "@alternative"
replace_node = "if_statement"
is_seed_rule = false

#########################
# Boolean operator vereenvoudigingen (AND)
#########################
[[rules]]
groups = ["boolean_expression_simplify"]
name = "simplify_true_and_something"
query = """
(
  (binary_expression
     left: ((true) @lhs)
     operator: "&&"
     right: (_) @rhs
  ) @binary_expression
)
"""
replace = "@rhs"
replace_node = "binary_expression"
is_seed_rule = false

[[rules]]
groups = ["boolean_expression_simplify"]
name = "simplify_something_and_true"
query = """
(
  (binary_expression
     left: (_) @lhs
     operator: "&&"
     right: ((true) @rhs)
  ) @binary_expression
)
"""
replace = "@lhs"
replace_node = "binary_expression"
is_seed_rule = false

#########################
# Boolean operator vereenvoudigingen (OR)
#########################
[[rules]]
groups = ["boolean_expression_simplify"]
name = "simplify_something_or_false"
query = """
(
  (binary_expression
     left: (_) @lhs
     operator: "||"
     right: ((false) @rhs)
  ) @binary_expression
)
"""
replace = "@lhs"
replace_node = "binary_expression"
is_seed_rule = false

[[rules]]
groups = ["boolean_expression_simplify"]
name = "simplify_false_or_something"
query = """
(
  (binary_expression
     left: ((false) @lhs)
     operator: "||"
     right: (_) @rhs
  ) @binary_expression
)
"""
replace = "@rhs"
replace_node = "binary_expression"
is_seed_rule = false

#########################
# Negatie vereenvoudigingen
#########################
[[rules]]
groups = ["boolean_expression_simplify"]
name = "simplify_not_false"
query = """
(
  (prefix_unary_expression
      operator: "!"
      argument: ((false) @exp)
  ) @prefix_unary_expression
)
"""
replace = "true"
replace_node = "prefix_unary_expression"
is_seed_rule = false

[[rules]]
groups = ["boolean_expression_simplify"]
name = "simplify_not_true"
query = """
(
  (prefix_unary_expression
      operator: "!"
      argument: ((true) @exp)
  ) @prefix_unary_expression
)
"""
replace = "false"
replace_node = "prefix_unary_expression"
is_seed_rule = false

#########################
# Feature flag refactoring
#########################
[[rules]]
groups = ["feature_flag_refactor", "boolean_expression_simplify"]
name = "refactor_feature_flag_enabled"
query = """
(
  (scoped_call_expression
      class: (name) @class
      name: (name) @method
      arguments: (arguments (argument_list) @flag)
  ) @call
  (#eq? @class "Feature")
  (#eq? @method "enabled")
)
"""
replace = "true"
replace_node = "call"
is_seed_rule = false

[[rules]]
groups = ["feature_flag_refactor", "boolean_expression_simplify"]
name = "refactor_feature_flag_disabled"
query = """
(
  (scoped_call_expression
      class: (name) @class
      name: (name) @method
      arguments: (arguments (argument_list) @flag)
  ) @call
  (#eq? @class "Feature")
  (#eq? @method "disabled")
)
"""
replace = "false"
replace_node = "call"
is_seed_rule = false

#########################
# Verwijder statements na een return
#########################
[[rules]]
name = "delete_all_statements_after_return"
query = """
(
  (compound_statement
    (block_items
      (_)* @pre
      (return_statement) @return_stmt
      (_)+ @post
    ) @block_items
    (#match? @return_stmt "return")
  )
)
"""
replace = ""
replace_node = "post"
is_seed_rule = false

#########################
# Dummy regels voor cleanups
#########################
[[rules]]
name = "boolean_literal_cleanup"
is_seed_rule = false

[[rules]]
name = "statement_cleanup"
is_seed_rule = false
